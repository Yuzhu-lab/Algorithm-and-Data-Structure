198. House Robber
class Solution:
    def rob(self, nums: List[int]) -> int:
        @cache
        def dp(i: int) -> int:
            if i <= 0: return 0
            return max(nums[i-1] + dp(i-2), dp(i-1))
        return dp(len(nums))

213. House Robber II
class Solution:
    def rob(self, nums: List[int]) -> int:
        N = len(nums)
        if N == 1: return nums[0]
        
        @cache
        def dp(start:int, end:int) -> int:
            if end < start: return 0
            return max(nums[end] + dp(start, end-2), dp(start, end-1))
        
        return max(dp(0, N-2), dp(1, N-1))
