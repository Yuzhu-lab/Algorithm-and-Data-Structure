import numpy as np
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        P = np.prod(nums)
        for x in nums:
            if x == 0:
                li = nums.copy()
                li.remove(x)
                yield np.prod(li)
            else:
                yield P//x
 
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        ans = [1] * length
        for i in range(1, length):
            ans[i] = ans[i-1] * nums[i-1]
        R = 1
        for p in reversed(range(0, length)):
            ans[p] = R * ans[p]
            R *= nums[p]
        return ans
