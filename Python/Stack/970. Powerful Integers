class Solution:
    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        i,j = 0,0
        def get_num(x,y,i,j):
            return pow(x,i) + pow(y,j)
        res = dict()
        while get_num(x,y,i,j) <= bound:
            while get_num(x,y,i,j) <= bound:
                res[get_num(x,y,i,j)] = 1
                i += 1
                if x == 1:
                    break
            i = 0
            j += 1
            if y == 1:
                break  
        return res.keys()
        
# using stack to record the nearby test, this process is continous. We could execute until the stack is empty. 
# when I only want to record the distinct value, use set and set.add method for the code. This is fast!
class Solution:
    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        stack = [(0,0)]
        D = set()
        while stack:
            i,j = stack.pop()
            res = pow(x,i) + pow(y,j)
            if res <= bound:
                D.add(res)
                if x > 1:
                    stack.append((i + 1, j))
                if y > 1:
                    stack.append((i, j + 1))
        return D
