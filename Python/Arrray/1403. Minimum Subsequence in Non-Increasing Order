# class Solution:
#     def minSubsequence(self, nums: List[int]) -> List[int]:
#         nums = sorted(nums)
#         res = []
#         while sum(res) <= sum(nums):
#             res.append(nums.pop())
#         return res  
class Solution:
    def minSubsequence(self, nums: List[int]) -> List[int]:
        nums = sorted(nums)
        pointer = len(nums) - 1
        while sum(nums[pointer:]) <= sum(nums[:pointer]):
            pointer -= 1
        return nums[pointer:][::-1]
