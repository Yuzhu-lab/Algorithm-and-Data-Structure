# Moore voting algorithm
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        if not nums:
            return []
        candidate1, candidate2, vote1, vote2 = 1,1,0,0
        for x in nums:
            if x == candidate1:
                vote1 += 1
            elif x == candidate2:
                vote2 += 1
            elif vote1 == 0:
                candidate1 = x
                vote1 += 1
            elif vote2 == 0:
                candidate2 = x
                vote2 += 1
            else:
                vote1 -= 1
                vote2 -= 1
        res = []
        for c in set([candidate1, candidate2]):
            if nums.count(c) > len(nums)//3:
                res.append(c)
        return res
# The idea is similar to Moore voting algo. There should be at most 2 elements that has a vote more than 1/3. 
# I initialize a dictionary using Counter and then only reserve 2 elements in my dictionary. 
from collections import Counter
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        D = Counter()
        for x in nums:
            D[x] += 1
            if len(D) == 3:
                D-= Counter(set(D))
        return [i for i in D if nums.count(i) > len(nums)/3]
