55. Jump Game
动态规划问题： 
把给定的问题抽象为一个函数，找到子问题。原始的问题应该是最难的一个case。我通过递归调用前面的子问题来得到解。
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        
        @cache
        def dp(i: int) -> bool: 
            if i >= len(nums)-1: return True
            if i + nums[i]>= len(nums)-1: return True
            for j in range(1, nums[i]+1):
                if dp(i+j): return True
            return False
        
        return dp(0)
        
        
45. Jump Game II
class Solution:
    def jump(self, nums: List[int]) -> int:
        N = len(nums)
        @cache
        def dp(i: int) -> int:
            if i >= len(nums)-1: return 0
            if i+nums[i] >= len(nums)-1:return 1
            temp = N
            for j in range(1, nums[i]+1):
                temp = min(temp, dp(i+j)+1)
            return temp
        return dp(0)
