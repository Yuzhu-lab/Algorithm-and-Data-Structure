#Very alike old unique path. The difference is that when initiate the base case, it also stress the math form of realization for a row/column. 
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        D = {(0,0):1}
        a, b = len(obstacleGrid), len(obstacleGrid[-1])
        if obstacleGrid[0][0] == 1:
            return 0
        for i in range(1,a):
            D[(i,0)] = min(D[(i-1,0)] == 1, obstacleGrid[i][0] == 0)
        for j in range(1,b):
            D[(0,j)] = min(D[(0,j-1)] == 1, obstacleGrid[0][j] == 0)
        for i in range(1,a):
            for j in range(1,b):
                if obstacleGrid[i][j] == 1:
                    D[(i,j)] = 0
                else:
                    D[(i,j)] = D[(i,j-1)]+D[(i-1,j)]
        print(D)
        return int(D[(len(obstacleGrid)-1, len(obstacleGrid[-1])-1)])
